---
import "../styles/global.css"; // Importe le CSS global

import { suid } from '../libs/utils';

const { type, titre } = Astro.props;

// Définir les couleurs en fonction du type
const typeColors = {
  exemple: "#e0e0e0", // Gris clair pour exemple
  démonstration: "#f5cccc", // Rouge pâle pour démonstration
  remarque: "#ccf5cc", // Vert pâle pour remarque
};

const borderColor = typeColors[type] || "#e0e0e0"; // Défaut : gris clair
const uniqueId = suid();
---

<div class="hideable-container" style={`border-color: ${borderColor};`}>
  <div class="hideable-header" style={`background-color: ${borderColor};`} id={`toggle-header-${uniqueId}`}>
    <span class="toggle-hideable-icon">▼</span> <!-- Flèche gauche -->
    <span class="titre">{titre}</span>
    <span class="ellipsis"></span> <!-- Ajouter une zone pour les points de suspension -->
    <span class="toggle-hideable-icon">▼</span> <!-- Flèche droite -->
  </div>
  <div class="hideable-body" id={`toggle-body-${uniqueId}`} style="display: none;">
    <!-- Contenu Markdown rendu dans le slot -->
    <div class="markdown-content">
      <div class="markdown-content">
        <slot/> <!-- Utilisation de Fragment pour insérer le HTML -->
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Sélectionner tous les headers (dans le cas où il y en aurait plusieurs)
    const headers = document.querySelectorAll('.hideable-header');

    headers.forEach(header => {
      const uniqueId = header.id.slice(14);  // Récupère la partie unique de l'ID
      const body = document.getElementById(`toggle-body-${uniqueId}`);
      const icons = header.querySelectorAll('.toggle-hideable-icon');  // Sélectionne les deux flèches (gauche et droite)

      if (body) {
        // Ajout du gestionnaire d'événements pour chaque header
        header.addEventListener("click", function() {
          // Vérifier si le body existe et basculer son affichage
          if (body.style.display === 'none' || body.style.display === '') {
            body.style.display = 'block';  // Afficher le corps
            icons[0].textContent = '▲';  // Flèche vers le haut (gauche)
            icons[1].textContent = '▲';  // Flèche vers le haut (droite)
          } else {
            body.style.display = 'none';  // Masquer le corps
            icons[0].textContent = '▼';  // Flèche vers le bas (gauche)
            icons[1].textContent = '▼';  // Flèche vers le bas (droite)
          }
        });
      }
    });
  });
</script>
